// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ //
//
//                ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀                  //
//                ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄             //
//                █   █  █  █   █  █  █   █  █  █   █             //
//                 ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀              //
//                       █      ▄▄▄█▄▄▄    █   █                  //
//                       ▀      █  █  █     █▄█                   //
//                     ▀▀▀▀▀    █  █  █      ▀                    //
//                              ▀  ▀  ▀                           //
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ //

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LAYONE  1
#define LAYTWO  2
#define ADJ  3

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };

        combo_play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <4 3>;
            layers = <0>;
        };

        combo_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 11>;
            layers = <0>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <2 12>;
            layers = <0>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <3 13>;
            layers = <0>;
        };

        combo_ampberstand {
            bindings = <&kp AMPS>;
            key-positions = <4 14>;
            layers = <0>;
        };

        combo_cmd_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            layers = <0>;
        };
    };

    behaviors {
      // https://www.reddit.com/r/zmk/comments/12ujlmb/combing_modmorph_and_layer_tap/
      bspc_del: backspace_delete {
        compatible = "zmk,behavior-mod-morph";
        label = "BACKSPACE_DELETE";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp LA(BSPC)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      lt_bspc: layer_tap_bspc_del {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER_TAP_BACKSPACE_DELETE";
        #binding-cells = <2>;
        bindings = <&mo>, <&bspc_del>;
        tapping-term-ms = <200>;
      };
    };

    keymap {
        compatible = "zmk,keymap";
        base_layer {
            label = "Base Layer";
            bindings = <
            &kp Q  &kp W  &kp E         &kp R                 &kp T                 &kp Y                  &kp U             &kp I      &kp O    &kp P
            &kp A  &kp S  &kp D         &kp F                 &kp G                 &kp H                  &kp J             &kp K      &kp L    &kp SEMICOLON
&kp ESCAPE    &kp Z  &kp X  &kp C         &kp V                 &kp B                 &kp N                  &kp M             &kp COMMA  &kp DOT  &kp SLASH      &mt RIGHT_SHIFT SQT
                          &kp LGUI      &lt_bspc LAYONE BASE  &mt LEFT_SHIFT SPACE  &mt RIGHT_SHIFT SPACE  &lt LAYTWO ENTER  &kp MINUS
            >;
        };

        LAYONE {
            label = "Layer One";
            bindings = <
        &trans     &kp LG(N1)  &kp LG(N2)   &kp LG(N3) &trans    &trans      &kp LS(LC(LEFT))  &kp LC(LS(RIGHT))  &trans        &trans
        &trans     &trans     &trans      &trans    &trans    &kp LEFT    &kp DOWN          &kp UP             &kp RIGHT     &trans
&trans  &trans     &trans     &trans      &trans    &trans    &trans      &trans            &trans             &trans        &trans  &trans
                              &trans     &trans     &trans    &trans      &trans            &trans
            >;
        };

        LAYTWO {
            label = "Layer Two";
            bindings = <
        &trans  &kp N7     &kp N8      &kp N9         &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &trans     &kp RA(RG(I))     &trans  &trans
        &kp N0   &kp N4     &kp N5      &kp N6         &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp EQUAL  &kp GREATER_THAN  &trans  &trans
&trans  &trans  &kp N1     &kp N2      &kp N3         &kp LESS_THAN           &trans                 &trans     &trans            &trans  &trans  &trans
                          &trans     &trans        &trans                  &trans                 &trans     &trans
            >;
        };

        ADJUST {
            label = "Adjustment layer";
            bindings = <
        &trans  &trans  &trans    &kp LA(LC(U))  &kp LA(LC(I))  &trans  &trans  &kp RG(BACKSLASH)    &trans  &trans
        &trans  &trans  &trans    &kp LA(LC(J))  &kp LA(LC(K))  &trans  &kp LA(LC(ENTER))             &trans  &trans  &trans
&trans  &trans  &trans  &trans         &trans         &trans    &trans  &trans             &trans  &trans  &trans  &trans
                        &trans         &trans         &trans    &trans  &trans             &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        ADJUST_LAYER {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
