// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ //
//
//                ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀                  //
//                ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄             //
//                █   █  █  █   █  █  █   █  █  █   █             //
//                 ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀              //
//                       █      ▄▄▄█▄▄▄    █   █                  //
//                       ▀      █  █  █     █▄█                   //
//                     ▀▀▀▀▀    █  █  █      ▀                    //
//                              ▀  ▀  ▀                           //
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ //

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NUM  1
#define SYM  2
#define ADJ  3

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };

        combo_play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <4 3>;
            layers = <0>;
        };

        Delete {
            bindings = <&kp RA(BACKSPACE)>;
            key-positions = <8 37>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            label = "BASE";

            //             ┏━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━┓
            //             ┃     Q      ┃     W     ┃      E     ┃      R     ┃      T     ┃   ┃      Y     ┃      U     ┃      I     ┃      O     ┃      P    ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━┫
            //             ┃      A     ┃     S     ┃      D     ┃      F     ┃      G     ┃   ┃      H     ┃      J     ┃      K     ┃      L     ┃     ;     ┃
            // ┏━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━┓
            // ┃   ESC     ┃      Z     ┃     X     ┃      C     ┃      V     ┃      B     ┃   ┃      N     ┃      M     ┃      ,     ┃      .     ┃     /     ┃ SHIFT/' ┃
            // ┗━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━┻━━━━━━━━━┛
            //                                      ┃ NUM / TAB  ┃   ENTER    ┃    SPACE   ┃   ┃   SPACE    ┃  SYM/BSPC  ┃      -     ┃
            //                                      ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &kp Q        &kp W       &kp E       &kp R         &kp T        &kp Y      &kp U         &kp I       &kp O       &kp P
            &hm LCTRL A  &hm LALT S  &hm LGUI D  &hm LSHIFT F  &kp G        &kp H      &hm RSHFT J   &hm RGUI K  &hm RALT L  &hm RCTRL SEMICOLON
&kp ESCAPE  &kp Z        &kp X       &kp C       &kp V         &kp B        &kp N      &kp M         &kp COMMA   &kp DOT     &kp SLASH            &mt RIGHT_SHIFT SQT
                                     &lt NUM TAB &kp ENTER     &kp SPACE    &kp SPACE  &lt SYM BSPC  &lt NUM MINUS
            >;
        };

        NUM {
            label = "Number and Arrow Layer";
            bindings = <
        &trans     &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans    &trans      &kp LS(LC(LEFT))  &kp LC(LS(RIGHT))  &kp BSPC    &trans
        &kp KP_N0  &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans    &kp LEFT    &kp DOWN          &kp UP             &kp RIGHT  &trans
&trans  &trans     &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans    &trans      &trans            &trans             &trans     &trans  &trans
                              &trans     &trans     &trans    &kp RSHIFT  &trans            &trans
            >;
        };

        SYM {
            label = "Symbol layer";
            bindings = <
        &trans  &trans     &trans      &trans         &kp LEFT_BRACE          &kp RIGHT_BRACE        &trans     &kp RA(RG(I))     &trans  &trans
        &trans  &trans     &trans      &kp LESS_THAN  &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp EQUAL  &kp GREATER_THAN  &trans  &trans
&trans  &trans  &kp K_CUT  &kp K_COPY  &kp K_PASTE    &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &trans     &trans            &trans  &kp SLASH  &kp HOME
                           &trans      &trans         &trans                  &trans                 &trans     &trans
            >;
        };

        ADJUST {
            label = "Adjustment layer";
            bindings = <
        &bt BT_CLR         &trans  &bootloader  &trans  &bt BT_SEL 0    &trans  &kp RG(BACKSLASH)  &bootloader  &trans  &trans
        &trans             &trans  &trans       &trans  &bt BT_SEL 1    &trans  &trans             &trans       &trans  &trans
&trans  &ext_power EP_TOG  &trans  &trans       &trans  &bt BT_SEL 2    &trans  &trans             &trans       &trans  &trans  &trans
                                   &trans       &trans  &trans          &trans  &trans             &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        ADJUST_LAYER {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
